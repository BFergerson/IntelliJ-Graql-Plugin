/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.lang.graql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.lang.graql.psi.GraqlTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Graql.flex</tt>
 */
public class _GraqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\43\1\10\1\3\1\12\2\0\1\6\1\50\1\51\2\0\1\47\1\11"+
    "\1\5\1\0\12\4\1\45\1\46\1\0\1\44\3\0\32\13\1\0\1\7\2\0\1\13\1\0\1\25\1\20"+
    "\1\36\1\15\1\22\1\40\1\34\1\24\1\14\1\13\1\21\1\27\1\37\1\33\1\32\1\26\1\13"+
    "\1\30\1\16\1\31\1\17\1\35\1\41\1\42\1\23\1\13\1\52\1\0\1\53\7\0\1\1\32\0\1"+
    "\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\2\2\1\1\1\6"+
    "\22\1\1\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\5\1\0\1\16\3\0\1\17\1\1\1\20"+
    "\11\1\1\21\11\1\1\22\11\1\1\23\1\1\1\24"+
    "\5\1\1\25\1\26\1\27\2\1\1\30\1\1\1\31"+
    "\1\32\11\1\1\33\1\1\1\34\3\1\1\35\4\1"+
    "\1\36\5\1\1\37\11\1\1\40\1\41\1\1\1\42"+
    "\1\43\6\1\1\44\2\1\1\45\13\1\1\46\1\47"+
    "\1\1\1\50\1\1\1\51\4\1\1\52\1\1\1\53"+
    "\1\54\1\55\1\1\1\56\1\57\1\1\1\60\6\1"+
    "\1\61\1\62\1\63\2\1\1\64\3\1\1\65\1\66"+
    "\1\67\1\1\1\70\4\1\1\71\1\72\3\1\1\73"+
    "\1\1\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\54\0\54\0\54\0\54"+
    "\0\54\0\54\0\54\0\u04d0\0\334\0\54\0\u04fc\0\u0108"+
    "\0\u0528\0\u0134\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630"+
    "\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790"+
    "\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u0134"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0a50\0\54\0\u0a7c\0\u0134\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\u0b58\0\u0134\0\u0134\0\u0134\0\u0b84\0\u0bb0\0\u0134\0\u0bdc"+
    "\0\u0134\0\u0134\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4"+
    "\0\u0d10\0\u0d3c\0\u0d68\0\u0134\0\u0d94\0\u0134\0\u0dc0\0\u0dec"+
    "\0\u0e18\0\u0134\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0134\0\u0ef4"+
    "\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0134\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u0134\0\u0134"+
    "\0\u115c\0\u0134\0\u0134\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238"+
    "\0\u1264\0\u0134\0\u1290\0\u12bc\0\u0134\0\u12e8\0\u1314\0\u1340"+
    "\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0"+
    "\0\u0134\0\u0134\0\u14cc\0\u0134\0\u14f8\0\u0134\0\u1524\0\u1550"+
    "\0\u157c\0\u15a8\0\u0134\0\u15d4\0\u0134\0\u0134\0\u0134\0\u1600"+
    "\0\u0134\0\u0134\0\u162c\0\u0134\0\u1658\0\u1684\0\u16b0\0\u16dc"+
    "\0\u1708\0\u1734\0\u0134\0\u0134\0\u0134\0\u1760\0\u178c\0\u0134"+
    "\0\u17b8\0\u17e4\0\u1810\0\u0134\0\u0134\0\u0134\0\u183c\0\u0134"+
    "\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u0134\0\u0134\0\u1918\0\u1944"+
    "\0\u1970\0\u0134\0\u199c\0\u0134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\2\1\7"+
    "\1\10\1\11\1\10\1\12\1\13\1\14\1\10\1\15"+
    "\1\16\1\17\1\10\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\10\1\27\1\30\1\31\1\32\1\10"+
    "\1\33\1\10\1\34\1\2\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\55\0\2\3\51\0\1\4\1\0"+
    "\52\4\4\0\1\5\1\44\3\0\1\10\1\0\30\10"+
    "\11\0\6\45\1\46\1\47\44\45\7\50\1\51\1\46"+
    "\43\50\4\0\1\10\4\0\1\10\1\0\30\10\15\0"+
    "\1\11\6\0\30\11\15\0\1\10\4\0\1\10\1\0"+
    "\2\10\1\52\1\53\14\10\1\54\7\10\15\0\1\10"+
    "\4\0\1\10\1\0\7\10\1\55\2\10\1\56\4\10"+
    "\1\57\10\10\15\0\1\10\4\0\1\10\1\0\4\10"+
    "\1\60\11\10\1\61\11\10\15\0\1\10\4\0\1\10"+
    "\1\0\17\10\1\62\10\10\15\0\1\10\4\0\1\10"+
    "\1\0\7\10\1\63\20\10\15\0\1\10\4\0\1\10"+
    "\1\0\20\10\1\64\7\10\15\0\1\10\4\0\1\10"+
    "\1\0\12\10\1\65\15\10\15\0\1\10\4\0\1\10"+
    "\1\0\3\10\1\66\12\10\1\67\2\10\1\70\6\10"+
    "\15\0\1\10\4\0\1\10\1\0\14\10\1\71\13\10"+
    "\15\0\1\10\4\0\1\10\1\0\12\10\1\72\4\10"+
    "\1\73\10\10\15\0\1\10\4\0\1\10\1\0\4\10"+
    "\1\74\2\10\1\75\7\10\1\76\10\10\15\0\1\10"+
    "\4\0\1\10\1\0\11\10\1\77\16\10\15\0\1\10"+
    "\4\0\1\10\1\0\25\10\1\100\2\10\15\0\1\10"+
    "\4\0\1\10\1\0\7\10\1\101\5\10\1\102\12\10"+
    "\15\0\1\10\4\0\1\10\1\0\1\10\1\103\26\10"+
    "\15\0\1\10\4\0\1\10\1\0\14\10\1\104\2\10"+
    "\1\105\10\10\15\0\1\10\4\0\1\10\1\0\1\10"+
    "\1\106\5\10\1\107\2\10\1\110\15\10\15\0\1\10"+
    "\4\0\1\10\1\0\11\10\1\111\16\10\55\0\1\112"+
    "\13\0\1\44\47\0\1\45\1\0\52\45\1\50\1\0"+
    "\52\50\4\0\1\10\4\0\1\113\1\0\12\10\1\114"+
    "\15\10\15\0\1\10\4\0\1\10\1\0\3\10\1\115"+
    "\24\10\15\0\1\10\4\0\1\10\1\0\14\10\1\116"+
    "\10\10\1\117\2\10\15\0\1\10\4\0\1\10\1\0"+
    "\16\10\1\120\11\10\15\0\1\10\4\0\1\10\1\0"+
    "\4\10\1\121\23\10\15\0\1\10\4\0\1\10\1\0"+
    "\5\10\1\122\16\10\1\123\3\10\15\0\1\10\4\0"+
    "\1\10\1\0\2\10\1\124\12\10\1\125\12\10\15\0"+
    "\1\10\4\0\1\10\1\0\17\10\1\126\10\10\15\0"+
    "\1\10\4\0\1\10\1\0\10\10\1\127\17\10\15\0"+
    "\1\10\4\0\1\10\1\0\16\10\1\130\11\10\15\0"+
    "\1\10\4\0\1\10\1\0\3\10\1\131\24\10\15\0"+
    "\1\10\4\0\1\10\1\0\6\10\1\132\21\10\15\0"+
    "\1\10\4\0\1\10\1\0\16\10\1\133\11\10\15\0"+
    "\1\10\4\0\1\10\1\0\21\10\1\134\6\10\15\0"+
    "\1\10\4\0\1\10\1\0\12\10\1\135\15\10\15\0"+
    "\1\10\4\0\1\10\1\0\5\10\1\136\22\10\15\0"+
    "\1\10\4\0\1\10\1\0\20\10\1\137\7\10\15\0"+
    "\1\10\4\0\1\10\1\0\14\10\1\140\13\10\15\0"+
    "\1\10\4\0\1\10\1\0\14\10\1\141\13\10\15\0"+
    "\1\10\4\0\1\10\1\0\14\10\1\142\13\10\15\0"+
    "\1\10\4\0\1\10\1\0\7\10\1\143\20\10\15\0"+
    "\1\10\4\0\1\10\1\0\16\10\1\144\11\10\15\0"+
    "\1\10\4\0\1\10\1\0\17\10\1\145\10\10\15\0"+
    "\1\10\4\0\1\10\1\0\12\10\1\146\15\10\15\0"+
    "\1\10\4\0\1\10\1\0\4\10\1\147\23\10\15\0"+
    "\1\10\4\0\1\10\1\0\4\10\1\150\17\10\1\151"+
    "\3\10\15\0\1\10\4\0\1\10\1\0\20\10\1\152"+
    "\7\10\15\0\1\10\4\0\1\10\1\0\2\10\1\153"+
    "\7\10\1\154\11\10\1\155\3\10\15\0\1\10\4\0"+
    "\1\10\1\0\16\10\1\156\10\10\1\157\15\0\1\10"+
    "\4\0\1\10\1\0\7\10\1\160\20\10\15\0\1\10"+
    "\4\0\1\10\1\0\12\10\1\161\15\10\15\0\1\10"+
    "\4\0\1\10\1\0\7\10\1\162\20\10\15\0\1\10"+
    "\4\0\1\10\1\0\7\10\1\163\20\10\15\0\1\10"+
    "\4\0\1\10\1\0\1\10\1\164\26\10\15\0\1\10"+
    "\4\0\1\10\1\0\7\10\1\165\2\10\1\166\15\10"+
    "\15\0\1\10\4\0\1\10\1\0\5\10\1\167\22\10"+
    "\15\0\1\10\4\0\1\10\1\0\1\10\1\170\26\10"+
    "\15\0\1\10\4\0\1\10\1\0\14\10\1\171\13\10"+
    "\15\0\1\10\4\0\1\10\1\0\1\10\1\172\26\10"+
    "\15\0\1\10\4\0\1\10\1\0\15\10\1\173\12\10"+
    "\15\0\1\10\4\0\1\10\1\0\15\10\1\174\12\10"+
    "\15\0\1\10\4\0\1\10\1\0\10\10\1\175\17\10"+
    "\15\0\1\10\4\0\1\10\1\0\7\10\1\176\20\10"+
    "\15\0\1\10\4\0\1\10\1\0\21\10\1\177\6\10"+
    "\15\0\1\10\4\0\1\10\1\0\7\10\1\200\20\10"+
    "\15\0\1\10\4\0\1\10\1\0\12\10\1\201\15\10"+
    "\15\0\1\10\4\0\1\10\1\0\7\10\1\202\20\10"+
    "\15\0\1\10\4\0\1\10\1\0\20\10\1\203\7\10"+
    "\15\0\1\10\4\0\1\10\1\0\4\10\1\204\23\10"+
    "\15\0\1\10\4\0\1\10\1\0\3\10\1\205\24\10"+
    "\15\0\1\10\4\0\1\10\1\0\20\10\1\206\7\10"+
    "\15\0\1\10\4\0\1\10\1\0\13\10\1\207\10\10"+
    "\1\210\3\10\15\0\1\10\4\0\1\10\1\0\1\10"+
    "\1\211\26\10\15\0\1\10\4\0\1\10\1\0\20\10"+
    "\1\212\7\10\15\0\1\10\4\0\1\10\1\0\5\10"+
    "\1\213\22\10\15\0\1\10\4\0\1\10\1\0\23\10"+
    "\1\214\4\10\15\0\1\10\4\0\1\10\1\0\20\10"+
    "\1\215\7\10\15\0\1\10\4\0\1\10\1\0\5\10"+
    "\1\216\22\10\15\0\1\10\4\0\1\10\1\0\15\10"+
    "\1\217\12\10\15\0\1\10\4\0\1\10\1\0\16\10"+
    "\1\220\11\10\15\0\1\10\4\0\1\10\1\0\20\10"+
    "\1\221\7\10\15\0\1\10\4\0\1\10\1\0\16\10"+
    "\1\222\11\10\15\0\1\10\4\0\1\10\1\0\14\10"+
    "\1\223\13\10\15\0\1\10\4\0\1\10\1\0\20\10"+
    "\1\224\7\10\15\0\1\10\4\0\1\10\1\0\7\10"+
    "\1\225\20\10\15\0\1\10\4\0\1\10\1\0\16\10"+
    "\1\226\11\10\15\0\1\10\4\0\1\10\1\0\1\10"+
    "\1\227\26\10\15\0\1\10\4\0\1\10\1\0\7\10"+
    "\1\230\20\10\15\0\1\10\4\0\1\10\1\0\3\10"+
    "\1\231\24\10\15\0\1\10\4\0\1\10\1\0\14\10"+
    "\1\232\13\10\15\0\1\10\4\0\1\10\1\0\16\10"+
    "\1\233\11\10\15\0\1\10\4\0\1\10\1\0\13\10"+
    "\1\234\14\10\15\0\1\10\4\0\1\10\1\0\16\10"+
    "\1\235\11\10\15\0\1\10\4\0\1\10\1\0\16\10"+
    "\1\236\11\10\15\0\1\10\4\0\1\10\1\0\4\10"+
    "\1\237\23\10\15\0\1\10\4\0\1\10\1\0\1\10"+
    "\1\240\26\10\15\0\1\10\4\0\1\10\1\0\12\10"+
    "\1\241\15\10\15\0\1\10\4\0\1\10\1\0\7\10"+
    "\1\242\20\10\15\0\1\10\4\0\1\10\1\0\11\10"+
    "\1\243\16\10\15\0\1\10\4\0\1\10\1\0\3\10"+
    "\1\244\24\10\15\0\1\10\4\0\1\10\1\0\16\10"+
    "\1\245\11\10\15\0\1\10\4\0\1\10\1\0\7\10"+
    "\1\246\20\10\15\0\1\10\4\0\1\10\1\0\7\10"+
    "\1\247\20\10\15\0\1\10\4\0\1\10\1\0\10\10"+
    "\1\250\17\10\15\0\1\10\4\0\1\10\1\0\7\10"+
    "\1\251\20\10\15\0\1\10\4\0\1\10\1\0\21\10"+
    "\1\252\6\10\15\0\1\10\4\0\1\10\1\0\12\10"+
    "\1\253\15\10\15\0\1\10\4\0\1\10\1\0\10\10"+
    "\1\254\17\10\15\0\1\10\4\0\1\10\1\0\5\10"+
    "\1\255\22\10\15\0\1\10\4\0\1\10\1\0\21\10"+
    "\1\256\6\10\15\0\1\10\4\0\1\10\1\0\1\10"+
    "\1\257\5\10\1\260\20\10\15\0\1\10\4\0\1\10"+
    "\1\0\7\10\1\261\20\10\15\0\1\10\4\0\1\10"+
    "\1\0\16\10\1\262\11\10\15\0\1\10\4\0\1\10"+
    "\1\0\16\10\1\263\11\10\15\0\1\10\4\0\1\10"+
    "\1\0\20\10\1\264\7\10\15\0\1\10\4\0\1\10"+
    "\1\0\15\10\1\265\12\10\15\0\1\10\4\0\1\10"+
    "\1\0\16\10\1\266\11\10\15\0\1\10\4\0\1\10"+
    "\1\0\13\10\1\267\14\10\15\0\1\10\4\0\1\10"+
    "\1\0\20\10\1\270\7\10\15\0\1\10\4\0\1\10"+
    "\1\0\4\10\1\271\23\10\15\0\1\10\4\0\1\10"+
    "\1\0\12\10\1\272\15\10\15\0\1\10\4\0\1\10"+
    "\1\0\17\10\1\273\10\10\15\0\1\10\4\0\1\10"+
    "\1\0\3\10\1\274\24\10\15\0\1\10\4\0\1\10"+
    "\1\0\15\10\1\275\12\10\15\0\1\10\4\0\1\10"+
    "\1\0\7\10\1\276\20\10\15\0\1\10\4\0\1\10"+
    "\1\0\15\10\1\277\12\10\15\0\1\10\4\0\1\10"+
    "\1\0\7\10\1\300\20\10\15\0\1\10\4\0\1\10"+
    "\1\0\16\10\1\301\11\10\15\0\1\10\4\0\1\10"+
    "\1\0\16\10\1\302\11\10\15\0\1\10\4\0\1\10"+
    "\1\0\20\10\1\303\7\10\15\0\1\10\4\0\1\10"+
    "\1\0\12\10\1\304\15\10\15\0\1\10\4\0\1\10"+
    "\1\0\7\10\1\305\20\10\15\0\1\10\4\0\1\10"+
    "\1\0\7\10\1\306\20\10\15\0\1\10\4\0\1\10"+
    "\1\0\3\10\1\307\24\10\15\0\1\10\4\0\1\10"+
    "\1\0\23\10\1\310\4\10\15\0\1\10\4\0\1\10"+
    "\1\0\11\10\1\311\16\10\15\0\1\10\4\0\1\10"+
    "\1\0\16\10\1\312\11\10\15\0\1\10\4\0\1\10"+
    "\1\0\1\10\1\313\26\10\15\0\1\10\4\0\1\10"+
    "\1\0\13\10\1\314\14\10\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\32\1\7\11\1\1\1\0\1\11\3\0"+
    "\40\1\1\11\202\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GraqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GraqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return IDENTIFIER;
            } 
            // fall through
          case 61: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 62: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 4: 
            { return SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 64: break;
          case 5: 
            { return NUMBER_LITERAL;
            } 
            // fall through
          case 65: break;
          case 6: 
            { return VARIABLE;
            } 
            // fall through
          case 66: break;
          case 7: 
            { return COLON;
            } 
            // fall through
          case 67: break;
          case 8: 
            { return SEMICOLON;
            } 
            // fall through
          case 68: break;
          case 9: 
            { return COMMA;
            } 
            // fall through
          case 69: break;
          case 10: 
            { return LPAREN;
            } 
            // fall through
          case 70: break;
          case 11: 
            { return RPAREN;
            } 
            // fall through
          case 71: break;
          case 12: 
            { return LBRACE;
            } 
            // fall through
          case 72: break;
          case 13: 
            { return RBRACE;
            } 
            // fall through
          case 73: break;
          case 14: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 74: break;
          case 15: 
            { return ID;
            } 
            // fall through
          case 75: break;
          case 16: 
            { return IN;
            } 
            // fall through
          case 76: break;
          case 17: 
            { return AS;
            } 
            // fall through
          case 77: break;
          case 18: 
            { return OF;
            } 
            // fall through
          case 78: break;
          case 19: 
            { return NOT_EQUAL;
            } 
            // fall through
          case 79: break;
          case 20: 
            { return ISA;
            } 
            // fall through
          case 80: break;
          case 21: 
            { return SUB;
            } 
            // fall through
          case 81: break;
          case 22: 
            { return SUM;
            } 
            // fall through
          case 82: break;
          case 23: 
            { return STD;
            } 
            // fall through
          case 83: break;
          case 24: 
            { return KEY;
            } 
            // fall through
          case 84: break;
          case 25: 
            { return HAS;
            } 
            // fall through
          case 85: break;
          case 26: 
            { return ASK;
            } 
            // fall through
          case 86: break;
          case 27: 
            { return GET;
            } 
            // fall through
          case 87: break;
          case 28: 
            { return VIA;
            } 
            // fall through
          case 88: break;
          case 29: 
            { return MIN;
            } 
            // fall through
          case 89: break;
          case 30: 
            { return MAX;
            } 
            // fall through
          case 90: break;
          case 31: 
            { return DATE;
            } 
            // fall through
          case 91: break;
          case 32: 
            { return LONG;
            } 
            // fall through
          case 92: break;
          case 33: 
            { return RULE;
            } 
            // fall through
          case 93: break;
          case 34: 
            { return ROLE;
            } 
            // fall through
          case 94: break;
          case 35: 
            { return THEN;
            } 
            // fall through
          case 95: break;
          case 36: 
            { return MEAN;
            } 
            // fall through
          case 96: break;
          case 37: 
            { return WHEN;
            } 
            // fall through
          case 97: break;
          case 38: 
            { return PLAYS;
            } 
            // fall through
          case 98: break;
          case 39: 
            { return LABEL;
            } 
            // fall through
          case 99: break;
          case 40: 
            { return GROUP;
            } 
            // fall through
          case 100: break;
          case 41: 
            { return COUNT;
            } 
            // fall through
          case 101: break;
          case 42: 
            { return MATCH;
            } 
            // fall through
          case 102: break;
          case 43: 
            { return INSERT;
            } 
            // fall through
          case 103: break;
          case 44: 
            { return DELETE;
            } 
            // fall through
          case 104: break;
          case 45: 
            { return DEFINE;
            } 
            // fall through
          case 105: break;
          case 46: 
            { return DOUBLE;
            } 
            // fall through
          case 106: break;
          case 47: 
            { return STRING;
            } 
            // fall through
          case 107: break;
          case 48: 
            { return ENTITY;
            } 
            // fall through
          case 108: break;
          case 49: 
            { return COMMIT;
            } 
            // fall through
          case 109: break;
          case 50: 
            { return MEDIAN;
            } 
            // fall through
          case 110: break;
          case 51: 
            { return MEMBER;
            } 
            // fall through
          case 111: break;
          case 52: 
            { return BOOLEAN;
            } 
            // fall through
          case 112: break;
          case 53: 
            { return RELATES;
            } 
            // fall through
          case 113: break;
          case 54: 
            { return CLUSTER;
            } 
            // fall through
          case 114: break;
          case 55: 
            { return COMPUTE;
            } 
            // fall through
          case 115: break;
          case 56: 
            { return DATATYPE;
            } 
            // fall through
          case 116: break;
          case 57: 
            { return ATTRIBUTE;
            } 
            // fall through
          case 117: break;
          case 58: 
            { return AGGREGATE;
            } 
            // fall through
          case 118: break;
          case 59: 
            { return IS_ABSTRACT;
            } 
            // fall through
          case 119: break;
          case 60: 
            { return RELATIONSHIP;
            } 
            // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
