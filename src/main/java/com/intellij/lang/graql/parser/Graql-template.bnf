{
    parserClass="com.intellij.lang.graql.parser.GraqlParser"
    parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Graql"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.lang.graql.psi"
    psiImplPackage="com.intellij.lang.graql.psi.impl"
    psiImplUtilClass="com.intellij.lang.graql.psi.impl.GraqlPsiImplUtil"

    elementTypeHolderClass="com.intellij.lang.graql.psi.GraqlTokenTypes"
    elementTypeClass="com.intellij.lang.graql.psi.GraqlElementType"
    tokenTypeClass="com.intellij.lang.graql.psi.GraqlTokenType"

    tokens=[
        DOLLAR      = '$'
        FOR         = 'for';
        IF          = 'if';
        ELSEIF      = 'elseif';
        ELSE        = 'else';
        DO          = 'do';
        IN          = 'in';

        EQ          = '=';
        NEQ         = '!=';
        AND         = 'and';
        OR          = 'or';
        NOT         = 'not';
        GREATER     = '>';
        GREATEREQ   = '>=';
        LESS        = '<';
        LESSEQ      = '<=';

        LPAREN      = '(';
        RPAREN      = ')';
        LBR         = '[';
        RBR         = ']';
        AT          = '@';
        QUOTE       = '"';
        SQOUTE      = "\'";
        NULL        = 'null';

        DATATYPE            = "regexp:(long|double|string|boolean|date)";
        ORDER_SORT          = 'regexp:(asc|desc)' ;
        BOOLEAN             = 'regexp:(true|false)' ;
        STRING              = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
        REGEX               = "regexp:/([^\\\/]+)/"
        INTEGER             = "regexp:([-+]?\d+)"
        space               = 'regexp:\s+'
        single_line_comment = 'regexp:#.*'
        ID                  = 'regexp:[a-zA-Z_0-9-]*'
        VARIABLE            = 'regexp:\$[a-zA-Z0-9_-]*'
    ]
}

GraqlTemplateFile ::= !<<eof>> blockContents

block ::= '{' blockContents '}'

//TODO remove escaped expression and handle escaping here
blockContents ::= (statement | escapedExpression | var | keyword | ID | VARIABLE)*

statement ::= forInStatement
    | forEachStatement
    | ifStatement

forInStatement   ::= FOR LPAREN ID IN list RPAREN DO block ;
forEachStatement ::= FOR LPAREN list RPAREN DO block ;

ifStatement   ::= ifPartial elseIfPartial* elsePartial? ;
ifPartial     ::= IF LPAREN bool RPAREN DO block ;
elseIfPartial ::= ELSEIF LPAREN bool RPAREN DO block ;
elsePartial   ::= ELSE block ;

expression    ::= untypedExpression | nil | string | number | BOOLEAN;
number        ::= untypedExpression | int_ | double_;
int_          ::= untypedExpression | INT;
double_       ::= untypedExpression | DOUBLE;
string        ::= untypedExpression | STRING;
list          ::= untypedExpression ;
nil           ::= NULL;
bool ::= LPAREN bool RPAREN       //groupExpression
    | NOT bool                   //notExpression
    | expression EQ expression   //eqExpression
    | expression NEQ expression  //notEqExpression
    | bool OR bool               //orExpression
    | bool AND bool              //andExpression
    | number GREATER number      //greaterExpression
    | number GREATEREQ number    //greaterEqExpression
    | number LESS number         //lessExpression
    | number LESSEQ number       //lessEqExpression
    | untypedExpression          //booleanExpression
    | BOOLEAN                    //booleanConstant

escapedExpression ::= untypedExpression;
untypedExpression ::= '<' id accessor* '>'                                   //idExpression
    | ID_MACRO LPAREN expression? (',' expression)* RPAREN   //macroExpression

accessor
 ::= '.' id            //mapAccessor
 | '[' int_ ']'      //listAccessor

id ::= ID | STRING;

var ::= DOLLAR (untypedExpression)+   //varResolved
    | VAR_GRAQL                     //varLiteral

keyword ::= ','
    | ';'
    | RPAREN
    | LPAREN
    | LBR
    | RBR
    | ':'
    | FOR
    | IF
    | ELSEIF
    | ELSE
    | DO
    | IN
    | BOOLEAN
    | AND
    | OR
    | NOT
    | NULL
    | EQ
    | NEQ
    | GREATER
    | GREATEREQ
    | LESS
    | LESSEQ
    | QUOTE
    | SQOUTE
    | STRING

VAR_GRAQL ::= DOLLAR ID;
ID_MACRO ::= AT ID;
