/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.lang.graql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.lang.graql.psi.GraqlTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_GraqlLexer.flex</tt>
 */
public class _GraqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\33\1\5\1\11\1\14\2\0\1\3\1\24\1\25\1\0\1\7\1\23\1"+
    "\13\1\20\1\6\12\10\1\21\1\22\1\30\1\31\1\32\1\0\1\15\1\75\1\67\1\101\1\74"+
    "\1\66\1\104\2\12\1\72\2\12\1\100\1\65\1\103\1\105\1\77\1\12\1\70\1\71\1\76"+
    "\1\106\4\12\1\73\1\16\1\4\1\17\1\0\1\102\1\0\1\43\1\36\1\56\1\53\1\40\1\60"+
    "\1\54\1\42\1\51\1\12\1\37\1\45\1\57\1\52\1\50\1\44\1\64\1\46\1\34\1\47\1\35"+
    "\1\55\1\61\1\62\1\41\1\63\1\26\1\0\1\27\7\0\1\1\32\0\1\2\337\0\1\2\177\0\13"+
    "\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\4\2\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\2\31\1"+
    "\1\0\1\25\4\0\1\4\1\0\1\1\1\26\1\27"+
    "\1\30\4\1\1\31\6\1\1\32\15\1\1\33\1\34"+
    "\1\35\1\1\1\36\1\37\1\40\4\1\1\41\22\1"+
    "\1\42\2\43\1\44\1\45\1\1\1\46\3\1\1\47"+
    "\3\1\1\50\1\51\1\52\1\1\1\53\17\1\1\54"+
    "\1\1\1\55\2\1\1\56\6\1\1\57\1\1\1\60"+
    "\1\61\10\1\1\62\1\63\2\1\1\64\7\1\1\65"+
    "\2\1\1\66\4\1\1\67\2\1\1\70\1\1\1\71"+
    "\2\1\1\72\1\73\1\74\4\1\1\75\1\1\1\76"+
    "\3\1\1\77\10\1\1\100\4\1\1\101\1\102\1\1"+
    "\1\103\1\1\1\104\11\1\1\105\1\106\1\107\1\110"+
    "\1\1\1\111\1\112\11\1\1\113\1\1\1\114\5\1"+
    "\1\115\1\116\4\1\1\117\2\1\1\120\1\121\1\122"+
    "\4\1\1\123\1\1\1\124\1\125\1\126\1\1\1\127"+
    "\1\1\1\130\3\1\1\131\1\132\1\133\3\1\1\134"+
    "\1\1\1\135\2\1\1\136\2\1\1\137\1\1\1\140"+
    "\1\1\1\141\1\142\2\1\1\143\4\1\1\144\1\145"+
    "\1\1\1\146\1\147\1\150\7\1\1\151\1\1\1\152"+
    "\7\1\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\107\0\u0354"+
    "\0\107\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545"+
    "\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\325\0\107\0\u0b18\0\u011c"+
    "\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\107\0\107\0\107"+
    "\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u027f\0\u0dde\0\u0e25\0\u0e6c"+
    "\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4"+
    "\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc"+
    "\0\u1323\0\u027f\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u027f\0\u027f"+
    "\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677"+
    "\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af"+
    "\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\107"+
    "\0\u0c34\0\u0c7b\0\u027f\0\u027f\0\u1ae7\0\u027f\0\u1b2e\0\u1b75"+
    "\0\u1bbc\0\u027f\0\u1c03\0\u1c4a\0\u1c91\0\u027f\0\u027f\0\u027f"+
    "\0\u1cd8\0\u027f\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82"+
    "\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba"+
    "\0\u2101\0\u027f\0\u2148\0\u027f\0\u218f\0\u21d6\0\u027f\0\u221d"+
    "\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u027f\0\u23c7\0\u027f"+
    "\0\u027f\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8"+
    "\0\u25ff\0\u027f\0\u027f\0\u2646\0\u268d\0\u027f\0\u26d4\0\u271b"+
    "\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u027f\0\u28c5\0\u290c"+
    "\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44"+
    "\0\u027f\0\u2b8b\0\u027f\0\u2bd2\0\u2c19\0\u027f\0\u027f\0\u027f"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u027f\0\u2d7c\0\u027f\0\u2dc3"+
    "\0\u2e0a\0\u2e51\0\u027f\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4"+
    "\0\u2ffb\0\u3042\0\u3089\0\u027f\0\u30d0\0\u3117\0\u315e\0\u31a5"+
    "\0\u027f\0\u027f\0\u31ec\0\u027f\0\u3233\0\u327a\0\u32c1\0\u3308"+
    "\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u027f"+
    "\0\u027f\0\u027f\0\u027f\0\u3540\0\u027f\0\u027f\0\u3587\0\u35ce"+
    "\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u027f"+
    "\0\u3806\0\u027f\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u027f"+
    "\0\u027f\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u027f\0\u3acc\0\u3b13"+
    "\0\u027f\0\u027f\0\u027f\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u027f"+
    "\0\u3c76\0\u027f\0\u027f\0\u027f\0\u3cbd\0\u027f\0\u3d04\0\u027f"+
    "\0\u3d4b\0\u3d92\0\u3dd9\0\u027f\0\u027f\0\u027f\0\u3e20\0\u3e67"+
    "\0\u3eae\0\u027f\0\u3ef5\0\u027f\0\u3f3c\0\u3f83\0\u027f\0\u3fca"+
    "\0\u4011\0\u027f\0\u4058\0\u027f\0\u409f\0\u027f\0\u027f\0\u40e6"+
    "\0\u412d\0\u027f\0\u4174\0\u41bb\0\u4202\0\u4249\0\u027f\0\u027f"+
    "\0\u4290\0\u027f\0\u027f\0\u027f\0\u42d7\0\u431e\0\u4365\0\u43ac"+
    "\0\u43f3\0\u443a\0\u4481\0\u027f\0\u44c8\0\u027f\0\u450f\0\u4556"+
    "\0\u459d\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u027f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\12\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\3\12\1\61\3\12\1\62\1\63\1\12\1\64"+
    "\12\12\110\0\2\3\104\0\3\65\1\66\1\67\102\65"+
    "\4\70\1\71\1\66\101\70\4\72\1\0\1\72\1\0"+
    "\100\72\10\0\1\73\76\0\1\74\1\0\6\74\1\10"+
    "\1\74\2\75\20\74\53\75\1\11\1\0\105\11\10\0"+
    "\1\12\1\0\2\12\20\0\53\12\10\0\1\10\1\0"+
    "\2\12\20\0\53\12\10\0\1\14\1\0\2\14\20\0"+
    "\53\14\31\0\1\76\106\0\1\77\106\0\1\100\65\0"+
    "\1\12\1\0\2\12\20\0\1\12\1\101\11\12\1\102"+
    "\1\12\1\103\35\12\10\0\1\12\1\0\2\12\20\0"+
    "\16\12\1\104\34\12\10\0\1\12\1\0\2\12\20\0"+
    "\5\12\1\105\6\12\1\106\36\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\107\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\11\12\1\110\4\12\1\111\11\12\1\112"+
    "\22\12\10\0\1\12\1\0\2\12\20\0\7\12\1\113"+
    "\43\12\10\0\1\12\1\0\2\12\20\0\1\114\12\12"+
    "\1\115\2\12\1\116\1\12\1\117\32\12\10\0\1\12"+
    "\1\0\2\12\20\0\7\12\1\120\1\12\1\121\41\12"+
    "\10\0\1\12\1\0\2\12\20\0\7\12\1\122\4\12"+
    "\1\123\1\124\35\12\10\0\1\12\1\0\2\12\20\0"+
    "\1\12\1\125\2\12\1\126\7\12\1\127\36\12\10\0"+
    "\1\12\1\0\2\12\20\0\6\12\1\130\3\12\1\131"+
    "\1\12\1\132\36\12\10\0\1\12\1\0\2\12\20\0"+
    "\12\12\1\133\11\12\1\134\26\12\10\0\1\12\1\0"+
    "\2\12\20\0\1\135\15\12\1\136\1\137\4\12\1\140"+
    "\26\12\10\0\1\12\1\0\2\12\20\0\1\12\1\141"+
    "\12\12\1\142\36\12\10\0\1\12\1\0\2\12\20\0"+
    "\4\12\1\143\2\12\1\144\4\12\1\145\36\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\146\5\12\1\147"+
    "\40\12\10\0\1\12\1\0\2\12\20\0\7\12\1\150"+
    "\5\12\1\151\35\12\10\0\1\12\1\0\2\12\20\0"+
    "\11\12\1\152\2\12\1\153\36\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\154\2\12\1\155\5\12\1\156"+
    "\35\12\10\0\1\12\1\0\2\12\20\0\7\12\1\157"+
    "\2\12\1\160\1\12\1\161\36\12\10\0\1\12\1\0"+
    "\2\12\20\0\6\12\1\162\44\12\10\0\1\12\1\0"+
    "\2\12\20\0\32\12\1\163\20\12\10\0\1\12\1\0"+
    "\2\12\20\0\36\12\1\164\14\12\10\0\1\12\1\0"+
    "\2\12\20\0\31\12\1\165\21\12\10\0\1\12\1\0"+
    "\2\12\20\0\41\12\1\166\7\12\1\167\1\12\1\65"+
    "\1\0\105\65\1\70\1\0\105\70\4\72\1\0\1\72"+
    "\1\170\100\72\1\74\1\0\6\74\1\73\76\74\10\0"+
    "\1\171\106\0\1\172\1\0\2\12\20\0\53\12\10\0"+
    "\1\12\1\0\2\12\20\0\2\12\1\173\20\12\1\174"+
    "\27\12\10\0\1\12\1\0\2\12\20\0\12\12\1\175"+
    "\4\12\1\176\33\12\10\0\1\12\1\0\2\12\20\0"+
    "\27\12\1\177\23\12\10\0\1\12\1\0\2\12\20\0"+
    "\17\12\1\200\33\12\10\0\1\12\1\0\2\12\20\0"+
    "\14\12\1\201\36\12\10\0\1\12\1\0\2\12\20\0"+
    "\5\12\1\202\45\12\10\0\1\12\1\0\2\12\20\0"+
    "\1\203\52\12\10\0\1\12\1\0\2\12\20\0\13\12"+
    "\1\204\37\12\10\0\1\12\1\0\2\12\20\0\1\12"+
    "\1\205\51\12\10\0\1\12\1\0\2\12\20\0\1\206"+
    "\52\12\10\0\1\12\1\0\2\12\20\0\3\12\1\207"+
    "\16\12\1\210\30\12\10\0\1\12\1\0\2\12\20\0"+
    "\13\12\1\211\37\12\10\0\1\12\1\0\2\12\20\0"+
    "\17\12\1\212\33\12\10\0\1\12\1\0\2\12\20\0"+
    "\20\12\1\213\32\12\10\0\1\12\1\0\2\12\20\0"+
    "\13\12\1\214\37\12\10\0\1\12\1\0\2\12\20\0"+
    "\7\12\1\215\43\12\10\0\1\12\1\0\2\12\20\0"+
    "\2\12\1\216\50\12\10\0\1\12\1\0\2\12\20\0"+
    "\16\12\1\217\34\12\10\0\1\12\1\0\2\12\20\0"+
    "\23\12\1\220\27\12\10\0\1\12\1\0\2\12\20\0"+
    "\11\12\1\221\41\12\10\0\1\12\1\0\2\12\20\0"+
    "\11\12\1\222\6\12\1\223\32\12\10\0\1\12\1\0"+
    "\2\12\20\0\11\12\1\224\41\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\225\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\1\12\1\226\51\12\10\0\1\12\1\0"+
    "\2\12\20\0\17\12\1\227\33\12\10\0\1\12\1\0"+
    "\2\12\20\0\24\12\1\230\26\12\10\0\1\12\1\0"+
    "\1\12\1\231\20\0\7\12\1\232\43\12\10\0\1\12"+
    "\1\0\2\12\20\0\1\233\12\12\1\234\37\12\10\0"+
    "\1\12\1\0\2\12\20\0\11\12\1\235\41\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\236\6\12\1\237"+
    "\37\12\10\0\1\12\1\0\2\12\20\0\1\240\10\12"+
    "\1\241\6\12\1\242\3\12\1\243\26\12\10\0\1\12"+
    "\1\0\2\12\20\0\13\12\1\244\37\12\10\0\1\12"+
    "\1\0\2\12\20\0\1\12\1\245\51\12\10\0\1\12"+
    "\1\0\2\12\20\0\13\12\1\246\37\12\10\0\1\12"+
    "\1\0\2\12\20\0\14\12\1\247\36\12\10\0\1\12"+
    "\1\0\2\12\20\0\11\12\1\250\41\12\10\0\1\12"+
    "\1\0\2\12\20\0\7\12\1\251\43\12\10\0\1\12"+
    "\1\0\2\12\20\0\1\12\1\252\51\12\10\0\1\12"+
    "\1\0\2\12\20\0\1\12\1\253\14\12\1\254\4\12"+
    "\1\255\27\12\10\0\1\12\1\0\2\12\20\0\7\12"+
    "\1\256\7\12\1\257\3\12\1\260\27\12\10\0\1\12"+
    "\1\0\2\12\20\0\13\12\1\261\12\12\1\262\24\12"+
    "\10\0\1\12\1\0\2\12\20\0\16\12\1\263\34\12"+
    "\10\0\1\12\1\0\2\12\20\0\11\12\1\264\41\12"+
    "\10\0\1\12\1\0\2\12\20\0\14\12\1\265\36\12"+
    "\10\0\1\12\1\0\2\12\20\0\12\12\1\266\40\12"+
    "\10\0\1\12\1\0\2\12\20\0\4\12\1\267\46\12"+
    "\10\0\1\12\1\0\2\12\20\0\31\12\1\270\21\12"+
    "\10\0\1\12\1\0\2\12\20\0\37\12\1\271\13\12"+
    "\10\0\1\12\1\0\2\12\20\0\43\12\1\272\7\12"+
    "\10\0\1\12\1\0\2\12\20\0\42\12\1\273\10\12"+
    "\10\0\1\12\1\0\2\12\20\0\52\12\1\274\10\0"+
    "\1\12\1\0\2\12\20\0\15\12\1\275\35\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\276\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\277\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\11\12\1\300\41\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\301\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\15\12\1\302\35\12\10\0"+
    "\1\12\1\0\2\12\20\0\7\12\1\303\43\12\10\0"+
    "\1\12\1\0\2\12\20\0\12\12\1\304\40\12\10\0"+
    "\1\12\1\0\2\12\20\0\12\12\1\305\40\12\10\0"+
    "\1\12\1\0\2\12\20\0\6\12\1\306\44\12\10\0"+
    "\1\12\1\0\2\12\20\0\5\12\1\307\45\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\310\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\20\12\1\311\32\12\10\0"+
    "\1\12\1\0\2\12\20\0\15\12\1\312\35\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\313\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\7\12\1\314\43\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\315\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\316\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\16\12\1\317\34\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\320\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\321\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\1\322\52\12\10\0\1\12"+
    "\1\0\2\12\20\0\7\12\1\323\43\12\10\0\1\12"+
    "\1\0\2\12\20\0\4\12\1\324\46\12\10\0\1\12"+
    "\1\0\2\12\20\0\11\12\1\325\41\12\10\0\1\12"+
    "\1\0\2\12\20\0\1\326\52\12\10\0\1\12\1\0"+
    "\2\12\20\0\22\12\1\327\30\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\330\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\12\12\1\331\40\12\10\0\1\12\1\0"+
    "\2\12\20\0\15\12\1\332\35\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\333\2\12\1\334\43\12\10\0"+
    "\1\12\1\0\2\12\20\0\2\12\1\335\50\12\10\0"+
    "\1\12\1\0\2\12\20\0\1\12\1\336\51\12\10\0"+
    "\1\12\1\0\2\12\20\0\1\337\52\12\10\0\1\12"+
    "\1\0\2\12\20\0\16\12\1\340\34\12\10\0\1\12"+
    "\1\0\2\12\20\0\13\12\1\341\37\12\10\0\1\12"+
    "\1\0\2\12\20\0\10\12\1\342\12\12\1\343\27\12"+
    "\10\0\1\12\1\0\2\12\20\0\16\12\1\344\34\12"+
    "\10\0\1\12\1\0\2\12\20\0\15\12\1\345\35\12"+
    "\10\0\1\12\1\0\2\12\20\0\2\12\1\346\50\12"+
    "\10\0\1\12\1\0\2\12\20\0\22\12\1\347\30\12"+
    "\10\0\1\12\1\0\2\12\20\0\1\350\52\12\10\0"+
    "\1\12\1\0\2\12\20\0\23\12\1\351\27\12\10\0"+
    "\1\12\1\0\2\12\20\0\16\12\1\352\34\12\10\0"+
    "\1\12\1\0\2\12\20\0\33\12\1\353\17\12\10\0"+
    "\1\12\1\0\2\12\20\0\32\12\1\354\20\12\10\0"+
    "\1\12\1\0\2\12\20\0\44\12\1\355\6\12\10\0"+
    "\1\12\1\0\2\12\20\0\32\12\1\356\20\12\10\0"+
    "\1\12\1\0\2\12\20\0\33\12\1\357\17\12\10\0"+
    "\1\12\1\0\2\12\20\0\16\12\1\360\34\12\10\0"+
    "\1\12\1\0\2\12\20\0\24\12\1\361\26\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\362\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\15\12\1\363\35\12\10\0"+
    "\1\12\1\0\2\12\20\0\13\12\1\364\37\12\10\0"+
    "\1\12\1\0\2\12\20\0\11\12\1\365\41\12\10\0"+
    "\1\12\1\0\2\12\20\0\15\12\1\366\35\12\10\0"+
    "\1\12\1\0\2\12\20\0\4\12\1\367\46\12\10\0"+
    "\1\12\1\0\2\12\20\0\1\370\52\12\10\0\1\12"+
    "\1\0\2\12\20\0\1\371\52\12\10\0\1\12\1\0"+
    "\2\12\20\0\11\12\1\372\41\12\10\0\1\12\1\0"+
    "\2\12\20\0\13\12\1\373\37\12\10\0\1\12\1\0"+
    "\2\12\20\0\13\12\1\374\37\12\10\0\1\12\1\0"+
    "\2\12\20\0\26\12\1\375\24\12\10\0\1\12\1\0"+
    "\2\12\20\0\12\12\1\376\40\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\377\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\2\12\1\u0100\50\12\10\0\1\12\1\0"+
    "\2\12\20\0\12\12\1\u0101\40\12\10\0\1\12\1\0"+
    "\2\12\20\0\22\12\1\u0102\30\12\10\0\1\12\1\0"+
    "\2\12\20\0\13\12\1\u0103\37\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\u0104\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\16\12\1\u0105\34\12\10\0\1\12\1\0"+
    "\2\12\20\0\13\12\1\u0106\37\12\10\0\1\12\1\0"+
    "\2\12\20\0\11\12\1\u0107\41\12\10\0\1\12\1\0"+
    "\2\12\20\0\10\12\1\u0108\42\12\10\0\1\12\1\0"+
    "\2\12\20\0\13\12\1\u0109\37\12\10\0\1\12\1\0"+
    "\2\12\20\0\13\12\1\u010a\37\12\10\0\1\12\1\0"+
    "\2\12\20\0\7\12\1\u010b\43\12\10\0\1\12\1\0"+
    "\2\12\20\0\1\12\1\u010c\51\12\10\0\1\12\1\0"+
    "\2\12\20\0\15\12\1\u010d\35\12\10\0\1\12\1\0"+
    "\2\12\20\0\7\12\1\u010e\43\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\u010f\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\6\12\1\u0110\44\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\u0111\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\32\12\1\u0112\20\12\10\0\1\12\1\0"+
    "\2\12\20\0\36\12\1\u0113\14\12\10\0\1\12\1\0"+
    "\2\12\20\0\42\12\1\u0114\10\12\10\0\1\12\1\0"+
    "\2\12\20\0\44\12\1\u0115\6\12\10\0\1\12\1\0"+
    "\2\12\20\0\20\12\1\u0116\32\12\10\0\1\12\1\0"+
    "\2\12\20\0\15\12\1\u0117\35\12\10\0\1\12\1\0"+
    "\2\12\20\0\7\12\1\u0118\43\12\10\0\1\12\1\0"+
    "\2\12\20\0\24\12\1\u0119\26\12\10\0\1\12\1\0"+
    "\2\12\20\0\5\12\1\u011a\45\12\10\0\1\12\1\0"+
    "\2\12\20\0\1\u011b\52\12\10\0\1\12\1\0\2\12"+
    "\20\0\2\12\1\u011c\50\12\10\0\1\12\1\0\2\12"+
    "\20\0\20\12\1\u011d\32\12\10\0\1\12\1\0\2\12"+
    "\20\0\4\12\1\u011e\10\12\1\u011f\35\12\10\0\1\12"+
    "\1\0\2\12\20\0\13\12\1\u0120\37\12\10\0\1\12"+
    "\1\0\2\12\20\0\1\u0121\52\12\10\0\1\12\1\0"+
    "\2\12\20\0\13\12\1\u0122\37\12\10\0\1\12\1\0"+
    "\2\12\20\0\10\12\1\u0123\42\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\u0124\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\u0125\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\u0126\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\5\12\1\u0127\45\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\u0128\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\4\12\1\u0129\46\12\10\0\1\12\1\0"+
    "\2\12\20\0\15\12\1\u012a\35\12\10\0\1\12\1\0"+
    "\2\12\20\0\13\12\1\u012b\37\12\10\0\1\12\1\0"+
    "\2\12\20\0\13\12\1\u012c\37\12\10\0\1\12\1\0"+
    "\2\12\20\0\16\12\1\u012d\34\12\10\0\1\12\1\0"+
    "\2\12\20\0\12\12\1\u012e\40\12\10\0\1\12\1\0"+
    "\2\12\20\0\34\12\1\u012f\16\12\10\0\1\12\1\0"+
    "\2\12\20\0\45\12\1\u0130\5\12\10\0\1\12\1\0"+
    "\2\12\20\0\36\12\1\u0131\14\12\10\0\1\12\1\0"+
    "\2\12\20\0\32\12\1\u0132\20\12\10\0\1\12\1\0"+
    "\2\12\20\0\16\12\1\u0133\34\12\10\0\1\12\1\0"+
    "\2\12\20\0\16\12\1\u0134\34\12\10\0\1\12\1\0"+
    "\2\12\20\0\1\12\1\u0135\51\12\10\0\1\12\1\0"+
    "\2\12\20\0\7\12\1\u0136\43\12\10\0\1\12\1\0"+
    "\2\12\20\0\1\u0137\52\12\10\0\1\12\1\0\2\12"+
    "\20\0\14\12\1\u0138\36\12\10\0\1\12\1\0\2\12"+
    "\20\0\13\12\1\u0139\37\12\10\0\1\12\1\0\2\12"+
    "\20\0\1\u013a\52\12\10\0\1\12\1\0\2\12\20\0"+
    "\10\12\1\u013b\42\12\10\0\1\12\1\0\2\12\20\0"+
    "\12\12\1\u013c\40\12\10\0\1\12\1\0\2\12\20\0"+
    "\16\12\1\u013d\34\12\10\0\1\12\1\0\2\12\20\0"+
    "\4\12\1\u013e\46\12\10\0\1\12\1\0\2\12\20\0"+
    "\35\12\1\u013f\15\12\10\0\1\12\1\0\2\12\20\0"+
    "\36\12\1\u0140\14\12\10\0\1\12\1\0\2\12\20\0"+
    "\31\12\1\u0141\21\12\10\0\1\12\1\0\2\12\20\0"+
    "\4\12\1\u0142\46\12\10\0\1\12\1\0\2\12\20\0"+
    "\13\12\1\u0143\37\12\10\0\1\12\1\0\2\12\20\0"+
    "\13\12\1\u0144\37\12\10\0\1\12\1\0\2\12\20\0"+
    "\16\12\1\u0145\34\12\10\0\1\12\1\0\2\12\20\0"+
    "\12\12\1\u0146\40\12\10\0\1\12\1\0\2\12\20\0"+
    "\4\12\1\u0147\46\12\10\0\1\12\1\0\2\12\20\0"+
    "\1\u0148\52\12\10\0\1\12\1\0\2\12\20\0\42\12"+
    "\1\u0149\10\12\10\0\1\12\1\0\2\12\20\0\32\12"+
    "\1\u014a\20\12\10\0\1\12\1\0\2\12\20\0\4\12"+
    "\1\u014b\46\12\10\0\1\12\1\0\2\12\20\0\4\12"+
    "\1\u014c\46\12\10\0\1\12\1\0\2\12\20\0\1\u014d"+
    "\52\12\10\0\1\12\1\0\2\12\20\0\7\12\1\u014e"+
    "\43\12\10\0\1\12\1\0\2\12\20\0\46\12\1\u014f"+
    "\4\12\10\0\1\12\1\0\2\12\20\0\6\12\1\u0150"+
    "\44\12\10\0\1\12\1\0\2\12\20\0\22\12\1\u0151"+
    "\30\12\10\0\1\12\1\0\2\12\20\0\36\12\1\u0152"+
    "\14\12\10\0\1\12\1\0\2\12\20\0\15\12\1\u0153"+
    "\35\12\10\0\1\12\1\0\2\12\20\0\13\12\1\u0154"+
    "\37\12\10\0\1\12\1\0\2\12\20\0\40\12\1\u0155"+
    "\12\12\10\0\1\12\1\0\2\12\20\0\10\12\1\u0156"+
    "\42\12\10\0\1\12\1\0\2\12\20\0\32\12\1\u0157"+
    "\20\12\10\0\1\12\1\0\2\12\20\0\47\12\1\u0158"+
    "\3\12\10\0\1\12\1\0\2\12\20\0\42\12\1\u0159"+
    "\10\12\10\0\1\12\1\0\2\12\20\0\36\12\1\u015a"+
    "\14\12\10\0\1\12\1\0\2\12\20\0\50\12\1\u015b"+
    "\2\12\10\0\1\12\1\0\2\12\20\0\36\12\1\u015c"+
    "\14\12\10\0\1\12\1\0\2\12\20\0\32\12\1\u015d"+
    "\20\12\10\0\1\12\1\0\2\12\20\0\34\12\1\u015e"+
    "\16\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\12\1\13\11\1\1\1\11\33\1\1\0"+
    "\1\11\4\0\1\1\1\0\1\1\3\11\67\1\1\11"+
    "\346\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GraqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GraqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ID;
            } 
            // fall through
          case 108: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 109: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 110: break;
          case 4: 
            { return INTEGER;
            } 
            // fall through
          case 111: break;
          case 5: 
            { return SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 112: break;
          case 6: 
            { return VARIABLE;
            } 
            // fall through
          case 113: break;
          case 7: 
            { return AT;
            } 
            // fall through
          case 114: break;
          case 8: 
            { return LBR;
            } 
            // fall through
          case 115: break;
          case 9: 
            { return RBR;
            } 
            // fall through
          case 116: break;
          case 10: 
            { return PERIOD;
            } 
            // fall through
          case 117: break;
          case 11: 
            { return COLON;
            } 
            // fall through
          case 118: break;
          case 12: 
            { return SEMICOLON;
            } 
            // fall through
          case 119: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 120: break;
          case 14: 
            { return LPAREN;
            } 
            // fall through
          case 121: break;
          case 15: 
            { return RPAREN;
            } 
            // fall through
          case 122: break;
          case 16: 
            { return LBRACE;
            } 
            // fall through
          case 123: break;
          case 17: 
            { return RBRACE;
            } 
            // fall through
          case 124: break;
          case 18: 
            { return LESS;
            } 
            // fall through
          case 125: break;
          case 19: 
            { return EQ;
            } 
            // fall through
          case 126: break;
          case 20: 
            { return GREATER;
            } 
            // fall through
          case 127: break;
          case 21: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 128: break;
          case 22: 
            { return LESSEQ;
            } 
            // fall through
          case 129: break;
          case 23: 
            { return GREATEREQ;
            } 
            // fall through
          case 130: break;
          case 24: 
            { return NEQ;
            } 
            // fall through
          case 131: break;
          case 25: 
            { return BY_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 26: 
            { return AS_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 27: 
            { return TO_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 28: 
            { return OR_KEYWORD;
            } 
            // fall through
          case 135: break;
          case 29: 
            { return OF_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 30: 
            { return IN_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 31: 
            { return ID_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 32: 
            { return IF_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 33: 
            { return DO_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 34: 
            { return REGEX;
            } 
            // fall through
          case 141: break;
          case 35: 
            { return REAL;
            } 
            // fall through
          case 142: break;
          case 36: 
            { return SUB_KEYWORD;
            } 
            // fall through
          case 143: break;
          case 37: 
            { return SUM_KEYWORD;
            } 
            // fall through
          case 144: break;
          case 38: 
            { return STD_KEYWORD;
            } 
            // fall through
          case 145: break;
          case 39: 
            { return KEY_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 40: 
            { return HAS_KEYWORD;
            } 
            // fall through
          case 147: break;
          case 41: 
            { return ASK_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 42: 
            { return ASC_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 43: 
            { return AND_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 44: 
            { return ISA_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 45: 
            { return INT_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 46: 
            { return NOT_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 47: 
            { return GET_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 48: 
            { return VAL_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 49: 
            { return VIA_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 50: 
            { return MAX_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 51: 
            { return MIN_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 52: 
            { return FOR_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 53: 
            { return SIZE_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 54: 
            { return ELSE_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 55: 
            { return PATH_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 56: 
            { return LONG_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 57: 
            { return RULE_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 58: 
            { return ROLE_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 59: 
            { return THEN_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 60: 
            { return TRUE_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 61: 
            { return NULL_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 62: 
            { return DESC_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 63: 
            { return DATE_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 64: 
            { return MEAN_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 65: 
            { return FROM_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 66: 
            { return WHEN_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 67: 
            { return SIZE;
            } 
            // fall through
          case 174: break;
          case 68: 
            { return DATE;
            } 
            // fall through
          case 175: break;
          case 69: 
            { return PATHS_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 70: 
            { return PLAYS_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 71: 
            { return LABEL_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 72: 
            { return LIMIT_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 73: 
            { return REGEX_KEYWORD;
            } 
            // fall through
          case 180: break;
          case 74: 
            { return ORDER_KEYWORD;
            } 
            // fall through
          case 181: break;
          case 75: 
            { return GROUP_KEYWORD;
            } 
            // fall through
          case 182: break;
          case 76: 
            { return COUNT_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 77: 
            { return MATCH_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 78: 
            { return FALSE_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 79: 
            { return STRING_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 80: 
            { return ELSEIF_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 81: 
            { return ENTITY_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 82: 
            { return EQUALS_KEYWORD;
            } 
            // fall through
          case 189: break;
          case 83: 
            { return OFFSET_KEYWORD;
            } 
            // fall through
          case 190: break;
          case 84: 
            { return INSERT_KEYWORD;
            } 
            // fall through
          case 191: break;
          case 85: 
            { return NOESCP_KEYWORD;
            } 
            // fall through
          case 192: break;
          case 86: 
            { return DELETE_KEYWORD;
            } 
            // fall through
          case 193: break;
          case 87: 
            { return DEFINE_KEYWORD;
            } 
            // fall through
          case 194: break;
          case 88: 
            { return DOUBLE_KEYWORD;
            } 
            // fall through
          case 195: break;
          case 89: 
            { return COMMIT_KEYWORD;
            } 
            // fall through
          case 196: break;
          case 90: 
            { return MEDIAN_KEYWORD;
            } 
            // fall through
          case 197: break;
          case 91: 
            { return MEMBER_KEYWORD;
            } 
            // fall through
          case 198: break;
          case 92: 
            { return DOUBLE;
            } 
            // fall through
          case 199: break;
          case 93: 
            { return BOOLEAN_KEYWORD;
            } 
            // fall through
          case 200: break;
          case 94: 
            { return RELATES_KEYWORD;
            } 
            // fall through
          case 201: break;
          case 95: 
            { return DEGREES_KEYWORD;
            } 
            // fall through
          case 202: break;
          case 96: 
            { return CLUSTER_KEYWORD;
            } 
            // fall through
          case 203: break;
          case 97: 
            { return COMPUTE_KEYWORD;
            } 
            // fall through
          case 204: break;
          case 98: 
            { return MEMBERS;
            } 
            // fall through
          case 205: break;
          case 99: 
            { return UNDEFINE_KEYWORD;
            } 
            // fall through
          case 206: break;
          case 100: 
            { return DATATYPE_KEYWORD;
            } 
            // fall through
          case 207: break;
          case 101: 
            { return CONTAINS_KEYWORD;
            } 
            // fall through
          case 208: break;
          case 102: 
            { return DATETIME;
            } 
            // fall through
          case 209: break;
          case 103: 
            { return ATTRIBUTE_KEYWORD;
            } 
            // fall through
          case 210: break;
          case 104: 
            { return AGGREGATE_KEYWORD;
            } 
            // fall through
          case 211: break;
          case 105: 
            { return IS_ABSTRACT_KEYWORD;
            } 
            // fall through
          case 212: break;
          case 106: 
            { return RELATIONSHIP_KEYWORD;
            } 
            // fall through
          case 213: break;
          case 107: 
            { return IMPLICIT_IDENTIFIER;
            } 
            // fall through
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
